class Solution {
    int max=1000000000;
    public int findShortestPath(int[][] mat) {
        // code here
        int n=mat.length;
        int m=mat[0].length;
        boolean vis[][]=new boolean[n][m];
        
        int min=max;
        for(int i=0;i<n;i++){
            // From leftmost to rightmost...
            min=Math.min(min,rec(i,0,mat,vis));
        }
        return min==max?-1:min;
    }
    
    int rec(int i, int j, int mat[][], boolean vis[][]){
        if(i<0 || j<0 || i>=mat.length || j>=mat[0].length || vis[i][j]==true || mat[i][j]==0 || 
        isvalid(i,j,mat)==false)
        return max;
        
        if(j==mat[0].length-1)
        return 1;
        
        vis[i][j]=true;
        
        int up=1+rec(i-1,j,mat,vis);
        int down=1+rec(i+1,j,mat,vis);
        int right=1+rec(i,j+1,mat,vis);
        // Backtracking...
        vis[i][j]=false;
        return Math.min(up,Math.min(down,right));
    }
    
    boolean isvalid(int i, int j, int mat[][]){
        if(i-1>=0 && mat[i-1][j]==0)
        return false;
        if(i+1<mat.length && mat[i+1][j]==0)
        return false;
        if(j+1<mat[0].length && mat[i][j+1]==0)
        return false;
        if(j-1>=0 && mat[i][j-1]==0)
        return false;
        return true;
    }
}
