class Solution {
    // Function to count inversions in the array.
    static int inversionCount(int arr[]) {
        int l = 0;
        int r = arr.length-1;
        int count[] = {0};
        mergeSort(arr,l,r,count);
        return count[0];
    }
    static void mergeSort(int arr[], int l, int r,int[] count) {
        int mid = (l+r)/2;
        if(l==r){
            return;
        }
        mergeSort(arr,l,mid,count);
        mergeSort(arr,mid+1,r,count);
        conqure(arr,l,mid,r,count);
    }
    static void conqure(int[] arr,int l,int mid,int r,int[] count){
        int left = l;
        int right = mid+1;
        int i=0;
        int merge[] = new int[r-l+1];
        while(left<=mid && right<=r){
            if(arr[left]<=arr[right]){
                merge[i++] = arr[left++];
                
            }
            else{
                merge[i++] = arr[right++];
                count[0]+=(mid-left+1); // thelineisadded
            }
        }
        while(left<=mid){
            merge[i++] = arr[left++];
        }
        while(right<=r){
            merge[i++] = arr[right++];
        }
        for(int k=l,h=0;h<merge.length;h++,k++){
            arr[k] = merge[h];
        }
    }
}
