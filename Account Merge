
class Solution {
  static int[]par;
  static List<List<String>> accountsMerge(List<List<String>> accounts) {
    // code here
    int n = accounts.size();
    par = new int[n];
    for(int i=0;i<n;i++){
        par[i] = i;
    }
    Map<String, Integer> m1 = new HashMap<>();
    for(int i=0;i<n;i++){
        for(int j=1;j<accounts.get(i).size();j++){
            String mail = accounts.get(i).get(j);
            if(m1.containsKey(mail)){
                int person = m1.get(mail);
                union(i, person);
            }
            else{
                m1.put(mail, i);
            }
        }
    }
    Map<Integer, TreeSet<String>> map = new HashMap<>();
    for(int i=0;i<n;i++){
        int root = find(i);
        List<String> al = accounts.get(i);
        if(!map.containsKey(root))
        map.put(root, new TreeSet<String>());
        map.get(root).addAll(al.subList(1, al.size()));
    }
    List<List<String>> res = new ArrayList<List<String>>();
    for(int root : map.keySet()){
        String name = accounts.get(root).get(0);
        ArrayList<String> curr = new ArrayList<>(map.get(root));
        curr.add(0, name);
        res.add(curr);
    }
    return res;
  }
  
  static int find(int idx){
      if(idx == par[idx])
      return idx;
      return par[idx] = find(par[idx]);
  }
  
  static void union(int x, int y){
      int x_rep = find(x);
      int y_rep =  find(y);
      if(x_rep == y_rep)
      return;
      par[y_rep] = x_rep;
  }
}
